
from telebot import TeleBot, types

bot = TeleBot(token='6828328502:AAGSCLfCSVJvppds7FwgmK862KDsTteHf4I', parse_mode='html') # создание бота

DEFINITOINS = {

    'тестирование': 'это поиск разницы между ожидаемым и фактическим результатом',
    'цель тестирования': 'это предоставление актуальной информации о состоянии продукта на данный момент. Поиск багов на раннем этапе',
    'тестировщик': 'это специалист, который проверяет работу ПО, проводит оценку качества продукта, наличие дефектов и соответствие фактической работы ПО к заявленным требованиям, снижает риски выпуска некачественного ПО',
    'qc (контроль качества)': 'то проверка и оценка качества продукта согласно документации и негативным кейсам',
    'qa (обеспечение качества)': 'это проверка и оценка качества продукта согласно документации и негативным кейсам, а также построение процесса тестирования. QA включает в себя, в том числе, и QC',
    'клиент': 'часть цифрового продукта, с которой взаимодействует пользователь. Обычно это сайт или мобильное приложение',
    'бэкэнд': 'это внутренняя, скрытая от пользователя часть цифрового продукта, которая находится на сервере. (в разговорной речи бэк, бэкэнд, сервер)',
    'http': 'это протокол, созданный для передачи данных от клиента к бэкэнду (бэкэнд с бэкэндом тоже могут обмениваться данными по HTTP)',
    'разница между HTTP и HTTPS': 'разница в SSL сертификате, который делает передачу данных более секьюрной. SSL-сертификат – это цифровой сертификат, удостоверяющий подлинность веб-сайта и позволяющий использовать зашифрованное соединение',
    'ручка, метод, эндпоинт': 'это синонимы HTTP запроса',
    'квери': 'это часть урла, в которой можно передать с клиента на бэкэнд дополнительную информацию. Не используют для передачи чувствительных данных (пароли, персональные данные). Квери начинаются со знака ?, а если в урле несколько квери, то каждый следующий разделяется &. Имеют ограничение по длине, поскольку максимальная длина урла 2048 символов',
    'статусы HTTP': '100-199 - информационные статусы 200-299 - успешные (сервер получил и принял запрос).Например: 200 - успех, 201 - создано, 202 - принято. 300-399 - перенаправление (для выполнения запроса нужно выполнить дальнейшие действия). 400-499 ошибки клиентские Например: 400 - неверный запрос, 401 - не авторизован, 403 — нет доступа, 404 - не найдено.500-599 серверные ошибки Например: 500 - внутренняя ошибка сервера, 501 - не реализовано, 502 - ошибочный шлюз, 503 - сервер не доступен, 504 — таймайут (то есть вышло время ожидания ответ)',
    'клиент-серверная архитектура': 'кса - один из вариантов устройства современных цифровых продуктов, в котором мы делим продукт на три части: клиент, сервер и база данных',
    'принципы тестирования': '1.тестирование демонстрирует наличие дефектов, а не их отсутствие 2. Исчерпывающее тестирование недостижимо 3.Раннее тестирование сохраняет время и деньги 4.Парадокс пестицида',
    'разница между GET и POST': 'у них разный смысл: GET — это запрос на получение данных, а POST — это запрос на отправку данных. У GET запроса нет body (технически body есть, но его не используют). У POST есть body. GET - идемпотентный, а POST нет',
    'разница между POST и PUT': 'у них разный смысл: PUT - это запрос на изменение данных, а POST - это запрос на отправку данных. PUT — идемпотентный, а POST нет',
    'xml': 'xml - формат обмена данными',
    'json': 'формат обмена данными',
    'типы данных в JSON' : 'строка, число, boolean, null, массив, объект',
    'хэдеры в HTTP': 'хэдеры - это часть HTTP запроса. В них передают метаинформация про запрос, например, какой используется браузер или какой формат сообщения в body: json или xml',
    'elements': 'используется для просмотра HTML дерева сайта и CSS стилей. Тестировщики могут посмотреть какой цвет у кнопки или размер шрифта, чтобы сравнить с требованиями в Figma',
    'console': 'отображение ошибок с клиента',
    'network': '(главная вкладка тестировщика) Позволяет посмотреть детально на общение по HTTP между клиентом и сервером. Можно посмотреть всё про HTTP-запрос: url, headers, body и всё по HTTP-ответ: status, headers и body. Есть throttling - смена скорости интернета',
    'application': 'Вкладка в которой отображается, что хранит клиент на своей стороне: local storage, session storage, куки или кэш',
    'rest': 'это архитектурный стиль, правила которого желательно соблюдать. Поддерживает различные форматы (JSON, XML, текстовые форматы). работает только по протоколу HTTP (или HTTPS). REST может быть закэширован.',
    'soap': '(это протокол, используя который важно строго соблюдать все его правила. поддерживает только XML. может работать с различными протоколами (HTTP, SMTP, FTP)',
    'api': 'api - это интерфейс, обычно реализованный в виде HTTP методов, с помощью которого может взаимодействовать клиент и сервер (или сервер и сервер)',
    'апи': '(от англ. «API», «Application Programming Interface») — программный интерфейс приложения или интерфейс прикладного программирования. Простыми словами, это описание вариантов взаимодействия компьютерных программ между собой',
    'регресс': 'это регрессивное тестирование, которое проводится с целью проверки, что новый функционал не поломал старый',
    'смоук': 'тестирование самого критического функционала, как правило, на 5 минут',
    'интеграционное тестирование': 'необходимо для того, чтобы тестировать взаимосвязь между чем-либо. Например, на сайте есть авторизация через google — это интеграция между нашим бекендом и бекендом google и нужно проверить, что она работает корректно',
    'нагрузочное тестирование': 'это способ определить справляется ли сервер с указанной для него нагрузкой в течении продолжительного времени',
    'стресс тестирование': 'проверка реакции сервера на резкий всплеск нагрузки, когда мы даём гигантскую нагрузку, больше чем он может выдержать, секунд на 15-30',
    'rps': '(requests per second) это количество запросов, получаемых сервером за одну секунду',
    'тест-дизайн': 'это рекомендации, советы и правила, по которым стоит разрабатывать тесты для проведения тестирования приложения. С их помощью можно уменьшить количество тест-кейсов в несколько раз. Несколько популярных техник тест-дизайна: классы эквивалентности, анализ граничных значений, попарное тестирование (Pairwace)',
    'класс эквивалентности': 'это техника тест-дизайна, в которой мы все вводные данные делим на классы по следующему признаку: любое значение из этого класса приводит к одинаковому поведению системы. Протестировав одно значение из класса эквивалентности — мы считаем что протестировали все значения в этом классе эквивалентности',
    'граничные значения': 'Из всех возможных значений мы проверяем минимальное (+/- 1), максимальное (+/- 1) и значения на стыке классов эквивалентности. На граничных значениях всегда самое высокое количество багов.',
    'пирамида тестирования': 'Это абстракция, которая показывает, что на идеальном проекте должно быть следующее распределение по количеству тестов: 1.Ручное тестирование (меньше всего) 2.Автотесты клиентской части 3.Автотесты на бекенд 4.Unit тесты (больше всего)',
    'тест-кейс': 'это чёткое описание действий, которые необходимо выполнить для проверки функционала',
    'tms': 'это системы управления тестированием. Домик, где хранятся тест-кейсы',
    'test suite': 'это наборы тест-кейсов, объединенные по какому-то признаку. Например, что они относятся к одному модулю, функциональности, приоритету или одному типу тестирования (например, тестирование личного кабинета)',
    'отчёт по тестированию': 'Это документ, обобщающий результаты работ по тестированию. Это может быть просто сообщения в общий чат - что тестирование завершено и все Окей. Другой вариант — это приложить отчёт из TMS системы, где ты прошёл Test-run',
    'проверка работы сайта со слабым интернетом': 'в devtools во вкладке network - throttling, где можем настроить нужную скорость соединения.',
    'чек-лист': 'это полный список проверок продукта в свободной форме',
    'тест-план': ' это документ, стоящий выше по иерархии важности, описывающий весь объем работ: оборудование, критерии начала и окончания тестирования, расписание, подготовка к релизу, стратегия, описание объектов, знания, оценки рисков с вариантами их разрешения с самого начала проекта.',
    'виды тестовой документации': 'баг-репорт,Тест-кейс,Чек-лист,Тест-план,Отчет о тестировании',
    'функциональное тестирование': 'функциональное (проверяем функции): проверка авторизации, проведение оплаты, работа функции «добавить в избранное», работа формы регистрации и формы авторизации. Сортировка, корзина, пагинация.',
    'нефункциональное': 'проверка вёрстки, стресс и нагрузочное тестирование, инсталляционное',
    'баг': '🕷️🐛🐜некая ошибка/дефект в написанном коде/программе, из-за которой программа ведет себя неожиданно, и, как следствие, выдает неправильные результаты',
    'тестировать дизайн из Figma': 'можно глазами, С помощью инструмента Pixel Perfect,Можно в devtools во вкладка Element сравнить размер и тип шрифта, цвет блоков со значениями в Figma',
    'баг-репорт': 'это отчёт, который информирует об ошибке в работе приложения. Сам документ доложен быть хорошо структурирован и содержать необходимую информацию.',
    'реляционные база данных': 'данные хранятся в нескольких таблицах.Таблицы связаны друг с другом с помощью Foreign Key',
    'нереляционные база данных': 'все другие варианты хранения данных.Например, в одной таблице с данными формате JSON.',
    'slave база данных': 'это реплика - копия основной базы данных.Предназначена для снижения нагрузки на мастер и обрабатывает запросы только для чтения.',
    'order by': 'выполняет сортировку выходных значений.',
    'agile': 'это гибкая методология разработки',
    'scrum': 'это подход, в котором: Делимся на команды до 10 человек. Делим работу на отрезки времени (спринты) по 1-2 недели. В начале каждого спринта — планирование.Каждый день встречи на 5-10 минут — стендапы (или дейлики).В конце спринта обсуждаем итоги и проблемы — ретро.Раз в два-три спринта устраиваем встречу между всеми командами и делимся результатами — демо.Может быть у кого-то роль «Скрам мастер»',
    'kanban': 'подход, построенный На управлении проектом в виде доски с карточками и столбиками-статусами',
    'дейли': 'ежедневные созвоны, где вся команда кратко рассказывает, кто что делал вчера, и что будет делать сегодня. Не более 15 минут.',
    'ретро': 'встреча в конце спринта, для обсуждения результатов. На встрече отвечают на вопросы: все ли вы там делали правильно? Какие ошибки допускали? Что получалось удачно, а что плохо?',
    'планирование': 'встреча, на которой обсуждаем, что будем делать в ближайшем спринте',
    'html': 'это язык разметки сайтов',
    'css': 'язык внешнего вида, стиля элементов сайта',
    'селектор (локатор)': 'механизм поиска html элемента',
    'http': 'это протокол передачи данных',
    'html': 'язык разметки сайтов',
    'xml': 'название тегов мы придумываем сами',
    'git checkout': 'команда в гите сменить ветку',
    'git commit -m "название коммита"': 'команда для создания коммита',
    'git clone': 'команда первый раз скачать себе репозиторий',
    'cUrl': 'это линуксовый инструмент, с помощью которого можно отправить HTTP запрос',
    'ci/cd': 'это философия разработки и набор практик, при которых в код вносятся небольшие изменения с частыми коммитами и постоянным деплоем в окружение',
    'хот-фикс': 'это релиз, в рамках которого выкатили только правку критичного бага',
    'ретест': 'это повторное тестирование ранее найденных багов, после исправления их разработчиком',
    'shift-left стратегия тестирования': 'это такой подход в тестировании, в котором QA погружается в работу на самых ранних стадиях разработки. Другими словами, QA начинает тестировать продукт уже на уровне идеи',
    'бета-тест': 'последнее испытание разрабатываемого продукта (ПО/приложения/сайта) перед его официальным выпуском',
    'нюансы мобильного тестирования': '1)Тестирование мобилок, проводятся как на реальных девайсах, так и на симуляторах и эмуляторах.Но финальное тестирование должно проводиться только на реальных девайсах.2)Разнообразие устройств и платформ: Мобильные устройства работают на различных операционных системах, таких как Android и iOS, и имеют множество различных моделей и конфигураций. 3)Мобильная сеть и связь: Приложения могут взаимодействовать с сетью и использовать мобильные данные. При тестировании необходимо проверить, как приложение работает при разных условиях сети, таких как медленное соединение или потеря связи. 4)При тестировании мобилок важно уделить внимание тестированию PUSH сообщениям. 5)У мобилок (в отличие от сайта) есть физические кнопки — важно протестировать кейсы, связанные с кнопками.',
    'adb': '(Android Debug Bridge) - это линуксовый инструмент для тестирования мобильных приложений. Позволяет: 1)Установить и удалить приложения 2)Просматривать логи 3)Копировать файлы с/на девайс 4)Передача скриншота',
    'бета тестер': 'человек, добровольно принимающий участие в бета-тестировании разрабатываемого продукта (сайта/ПО/приложения)',
    'эмулятор': 'эмулятор имитирует как операционную систему, так и техническое оснащение',
    'симулятор': 'имитирует только операционную систему.',
    'кэширование': 'это способ хранения данных как можно ближе к месту их использования.Например, в браузере.',
    'селектор': 'механизм поиска HTML элемента. Есть два популярных вида селекторов: 1.XPATH 2.CSS selector',
    'pytest': 'это фреймворк для автоматизации тестирования на Python.С помощью него можно написать тесты для проверки отдельных функций, классов или целых модулей. Он автоматически находит и запускает все тесты в указанной папке, а также выводит понятные отчеты об ошибках, если какой-либо тест провалился.',
    'f-string': 'это специальный способ форматирования строк Python. Он позволяет добавлять значения переменных прямо внутрь строки, чтобы сделать ее более динамической.',
    'selenium ': 'это фреймворк для управления браузером. Используется для тестирования фронтенда. Чаще всего Selenium используют на языках программирования Python и Java.',
    'фикстура': 'это аналог предусловия в тест-кейсах. Она нужна для того, чтобы подготовить тестовые данные или получить тестируемую систему в нужном состоянии.',
    'allure report': 'Инструмент (дашборд) для просмотра отчётов прогона автотестов.',


    }

# обработчик команды '/start'
@bot.message_handler(commands=['start'])
def start_command_handler(message: types.Message):
    # отправляем ответ на команду '/start'
    bot.send_message(
        chat_id=message.chat.id,  
        text='Привет! Я помогу тебе расшифровать термины и аббревиатуры из сферы QA 🤓📓📖 Если незнакомое слово будет тебе не понятно, то попробуй указать его на английском языке 😉\nВведи интересующий термин, например, "qa"', # текст сообщения
    )

# обработчик всех остальных сообщений
@bot.message_handler()
def message_handler(message: types.Message):
    # пробуем найти ключевую фразу в словаре
    definition = DEFINITOINS.get(
        message.text.lower(), # приводим текст сообщения к нижнему регистру
    )
    # если фразы нет в словаре, то переменная definition будет иметь значение None
    # проверяем это условие
    if definition is None:
        # если ключевая фраза не была найдена в словаре
        # отправляем ответ
        bot.send_message(
            chat_id=message.chat.id,
            text='😋 Я пока не знаю такого определения',
        )
        # выходим из функции
        return
    
    # если ключевая фраза была найдена, формируем текст сообщения и отправляем его
    # если перед строкой поставить букву f, то в фигурных скобках {} можно использовать переменные :)
    bot.send_message(
        chat_id=message.chat.id,
        text=f'Определение:\n<code>{definition}</code>',
    )

    bot.send_message(
        chat_id=message.chat.id,
        text=f'Жду следующий термин',
    )


# главная функция программы
def main():
    # запускаем нашего бота
    bot.infinity_polling()


if __name__ == '__main__':
    main()
